---
  - name: Validate Ubuntu version
    debug:
      msg: |
        Galactus is built for Ubuntu 16.04
        Your Ubuntu version is {{ ansible_distribution_version }} {{ ansible_distribution_release }}
        We recommend you re-create your server to get the best experience.
        Note: both of these methods will delete all your existing data. It's up to you to backup what's needed and restore it.
        Development via Vagrant: `vagrant destroy && vagrant up`
        Staging/Production: Create a new server with Ubuntu 16.04 and provision
    when: ansible_distribution_release != 'xenial'

  - name: Check whether passlib is needed
    fail:
      msg: |
        Ansible on OS X requires python passlib module to create user password hashes
        sudo easy_install pip
        pip install passlib
    when: env != 'development' and darwin_without_passlib | default(false)
    run_once: true

  - name: Retrieve local SSH client's settings per host
    set_fact:
      ssh_client_ciphers: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep ciphers') }}"
      ssh_client_kex: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep kexalgorithms') }}"
      ssh_client_macs: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep macs') }}"
      ssh_client_host_key_algorithms: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep hostkeyalgorithms') }}"
    when: openssh_6_8_plus and validate_ssh | default(true)
    tags: [sshd]

  - name: Validate compatible settings between SSH client and server
    assert:
      that:
        - overlapping_ciphers | count
        - overlapping_kex | count
        - overlapping_macs | count
        - overlapping_host_keys | count
      msg: "{{ lookup('template', 'validate_ssh_msg.j2') }}"
    when: openssh_6_8_plus and validate_ssh | default(true)
    tags: [sshd]

  - name : Update apt cache
    apt: update_cache=yes
    tags: 
      - dependencies

  - name: Install necessities and nice-to-haves
    apt:
      name: "{{ item.key }}"
      state: "{{ item.value }}"
      cache_valid_time: "{{ apt_cache_valid_time }}"
    with_dict: "{{ apt_packages }}"

  - name : timezone - configure /etc/timezone
    copy: 
      content: "{{ common_timezone | regex_replace('$', '\n') }}"
      dest: /etc/timezone
      owner: root
      group: root
      mode: 0644
    register: common_timezone_config

  - name: timezone - Set localtime to UTC
    file: src=/usr/share/zoneinfo/Etc/UTC dest=/etc/localtime
    when: common_timezone_config.changed
   
  - name: timezone - reconfigure tzdata
    command: dpkg-reconfigure --frontend noninteractive tzdata
    when: common_timezone_config.changed

  - include_tasks: sysctl.yml
    when: system_configure_high_traffic is defined
