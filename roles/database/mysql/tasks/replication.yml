---

- name: Reset Slave if it is already configured
  shell: >
    mysql -u root -NBe
    'RESET MASTER;'
  when: enable_mysql_slave_replication is defined
  tags: ['slave']

- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  when: >
    (mysql_replication_role == 'master')
    and mysql_replication_user
    and (mysql_replication_master != '')  
    and (enable_mysql_slave_replication is not defined) 
  tags: ['slave']

- name: Ensure replication user exists for group replication master.
  mysql_user:
    login_host: "{{ mysql_replication_master }}" 
    login_user: "{{ mysql_admin_user.name }}" 
    login_password: "{{ mysql_admin_user.password }}"
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  when: enable_mysql_slave_replication is defined
  tags: ['slave']

- name: Check slave replication status.
  mysql_replication:
    mode: getslave
    login_host: "{{ mysql_replication_user.host }}" 
    login_user: "{{ mysql_replication_user.name }}"
    login_password: "{{ mysql_replication_user.password }}"
  ignore_errors: true
  register: slave
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')
  tags: ['slave']

- name: Configure Slave for group replication DB
  shell: >
    mysql -u root -NBe
    'SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY = WARN;
      SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY = ON;
      SET @@GLOBAL.GTID_MODE = OFF_PERMISSIVE;
      SET @@GLOBAL.GTID_MODE = ON_PERMISSIVE;
      SET @@GLOBAL.GTID_MODE = ON;'
  when: enable_mysql_slave_replication is defined and mysql_group_replication
  tags: ['slave']


- name: Check master replication status.
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
  tags: ['slave']

- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  ignore_errors: true
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
    and mysql_replication_user
  tags: ['slave']

- name: Start replication.
  mysql_replication: mode=startslave
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
  tags: ['slave']
