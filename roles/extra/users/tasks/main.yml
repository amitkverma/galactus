---
- name: Ensure requested groups are present
  group:
    name: "{{ item }}"
    state: present
  with_items: "{{ users | sum(attribute='groups', start=[]) | list | unique }}"

- name: Ensure sudo group has sudo privileges
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^%sudo"
    line: "%sudo ALL=(ALL:ALL) ALL"
    validate: "/usr/sbin/visudo -cf %s"

- name: Fail if root login will be disabled but admin_user will not be a sudoer
  assert:
    that:
      - "{% for user in users if user.name == admin_user %}{{ 'sudo' in user.groups }}{% else %}{{ false }}{% endfor %}"
    msg: |
      When `sshd_permit_root_login: false`, you must add `sudo` to the `groups` for admin_user (in `users` hash), and set a password for admin_user in `vault_users` (in `group_vars/{{ env }}/vault.yml`). Otherwise Ansible could lose the ability to run the necessary sudo commands. {% if sudoer_passwords is defined or vault_sudoer_passwords is defined %}


      Please note that `sudoer_passwords` and `vault_sudoer_passwords have been replaced with `vault_users`. {% endif %}
  when: not sshd_permit_root_login
  tags: sshd

- name: Setup users
  user:
    name: "{{ item.name }}"
    group: "{{ item.groups[0] }}"
    groups: "{{ item.groups | join(',') }}"
    state: present
    shell: /bin/bash
  with_items: "{{ users }}"

- name: Add SSH keys
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
  with_subelements:
    - "{{ users | default([]) }}"
    - keys

- name: Sudoers | update sudoers file and validate
  lineinfile: "dest=/etc/sudoers
    insertafter=EOF
    line='{{ item.name }} ALL=(ALL) NOPASSWD: ALL'
    regexp='^{{ item.name }} .*'
    state=present"
  with_items: 
    - '{{ users }}'

- import_tasks: connection-warnings.yml
  tags: [connection-tests, sshd]

- import_tasks: security.yml
  tags: [sshd, security]
